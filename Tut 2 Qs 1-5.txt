Tutorial 2

Question 1


import numpy as np
from numpy.fft import fft,ifft
import matplotlib.pyplot as plt

def arrayshift(x,n=0):
    a=0*x
    a[n]=1
    aftrans=fft(a)
    xftrans=fft(x)
    return np.real(ifft(xftrans*aftrans))

if __name__ == '__main__':
    x=np.arange(-20,20,0.1)
    sigma=5  
    gauss=np.exp(-0.5*x**2/sigma**2)
    gausshift=arrayshift(gauss,gauss.size/2)

plt.plot(x,gausshift)
plt.plot(x,gauss)






Question 2


import numpy as np
from numpy.fft import fft,ifft
import matplotlib.pyplot as plt

def correlation_function(f,g):
    assert(f.size==g.size)
    xftrans=fft(f)
    yftrans=fft(g)
    conjugate=np.conj(yftrans)
    return np.real(ifft(xftrans*conjugate))

if __name__=='__main__':
    f=np.arange(-20,20,0.1)
    sigma=5
    gauss=np.exp(-0.5*f**2/sigma**2)
    correlation=correlation_function(gauss,gauss)     #not sure about this step   

plt.plot(f,correlation)







Question 3


import numpy as np
from numpy.fft import fft,ifft
import matplotlib.pyplot as plt

def arrayshift(x,n=0):
    a=0*x
    a[n]=1
    aftrans=fft(a)
    xftrans=fft(x)
    return np.real(ifft(xftrans*aftrans))

def correlation_function(f,g):
    assert(f.size==g.size)
    xftrans=fft(f)
    yftrans=fft(g)
    conjugate=np.conj(yftrans)
    return np.real(ifft(xftrans*conjugate))

if __name__=='__main__':
    x=np.arange(-20,20,0.1)
    sigma=5
    y=np.exp(-0.5*x**2/5**2)
    ycorr=correlation_function(y,y)
    yshift=arrayshift(y,y.size/4)
    yshiftcorr=correlation_function(yshift,yshift)
    meanerr=np.mean(np.abs(ycorr-yshiftcorr))
        
plt.plot(x,ycorr)
plt.plot(x,yshiftcorr)                  
        




Question 4


import numpy as np
from numpy.fft import fft,ifft
import matplotlib.pyplot as plt

def conv_arr(x,y):
    xnew=np.zeros(2*x.size)
    xnew[0:x.size]=x

    ynew=np.zeros(2*y.size)
    ynew[0:y.size]=y
    xnewft=fft(xnew)
    ynewft=fft(ynew)
    a=np.real(ifft(xnewft*ynewft))
    return a[0:x.size]

if __name__=='__main__':
    x=np.arange(-20,40,0.1)
    y=np.arange(-20,40,0.1)
    sigma=5
    y=np.exp(-0.5*x**2/sigma**2)
    y=y/y.sum()
    conv=conv_arr(y,y)
    
plt.plot(x,y)
plt.plot(x,conv)



Question 5                 #really stuck on this. I know that a couple of students were.


class complex:
    
    def __init__(self,r=0,i=0):
        self.r=r
        self.i=i
    
    def copy(self):
        return complex(self.r,self.i)





















